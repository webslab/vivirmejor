---
import { WlDatabase } from '@webslab/shared/components/database';

import BaseLayout from '$layouts/Base.astro'
---

<BaseLayout
  auth={true}
  admin={true}
  title="User Edit"
  description="Update users profile"
  back={{enabled: true, path: "/auth/admin/user/"}}>
  <div slot="actions">
    <button
      id="save"
      class="btn btn-primary"
      form="form-update-user"
      type="submit">Save</button>
  </div>

  <WlDatabase
    id="user-edit-wldb"
    live={false}
    target="section"
    query=""
    client:only="lit">
    <div>
      <section></section>
    </div>

    <template slot="template" is:raw>
      {% set user = result[0][0] %}
      {% set modules = result[1] %}

      <form
        id="form-update-user"
        class="row">
        <div class="col-12 col-lg-6">
          <div class="mb-3">
            <label for="user-name" class="form-label">Name</label>
            <input
              type="text"
              class="form-control"
              id="user-name"
              name="name"
              value="{{ user.name }}" />
          </div>

          <div class="mb-3">
            <label for="user-auth_until" class="form-label">Auth until</label>
            <input
              type="date"
              class="form-control"
              id="user-auth_until"
              name="auth_until"
              value="{{ user.auth_until }}" />
          </div>

          <div class="mb-3">
            <label for="user-email" class="form-label">Email address</label>
            <input
              type="email"
              class="form-control"
              id="user-email"
              name="email"
              value="{{ user.email }}" />
          </div>

          <div class="mb-3">
            <label for="user-username" class="form-label">Username</label>
            <input
              type="text"
              class="form-control"
              id="user-username"
              name="username"
              value="{{ user.username }}" />
          </div>

          <div class="mb-3">
            <label for="user-password" class="form-label">Password</label>
            <input
              type="password"
              class="form-control"
              id="user-password"
              name="password"
              aria-describedby="user-password-help" />

            <div id="user-password-help" class="form-text">
              <small class="text-success">If you leave it empty, the password will not be changed.</small>
            </div>
          </div>
        </div>

        <div class="col-12 col-lg-6">
          <h2 class="mb-0">Modules</h2>
          <hr class="mt-0" />

          {% for item in modules %}
          <ul class="list-group list-group-horizontal mb-1">
            <li class="list-group-item">
              {% if item.granted %}
              <input
                checked
                name="module"
                class="form-check-input"
                id="{{ item.slug }}"
                value="{{ item.id }}"
                type="checkbox" />
              {% else %}
              <input
                name="module"
                class="form-check-input"
                id="{{ item.slug }}"
                value="{{ item.id }}"
                type="checkbox" />
              {% endif %}
            </li>

            <li class="list-group-item w-100">
              <label class="form-check-label" for="{{ item.slug }}">
                {{ item.title }}
              </label>
            </li>

            <li class="d-none d-md-inline list-group-item w-100">
              {{ item.author }}
            </li>
          </ul>
          {% endfor %}
        </div>
      </form>
    </template>

    <script>
      import { authService } from '$lib/services/auth.ts'
      import { waitElement } from '$lib/utils.ts'

      customElements.whenDefined('wl-database').then(async () => {
        const wlDatabase: HTMLElement = await waitElement('#user-edit-wldb');
        const userId = new URLSearchParams(window.location.search).get('id')
        const query = `
          SELECT *, time::format(auth_until, '%Y-%m-%d') as auth_until FROM ${userId};
          SELECT *,
            author.name as author,
            !(SELECT VALUE id FROM grants WHERE out = $parent.id AND in = ${userId}).is_empty() AS granted
              FROM module;
        `;

        if (!userId || !wlDatabase) {
          return
        }

        wlDatabase.query = query
        wlDatabase.auth = authService
      })
    </script>
  </WlDatabase>
</BaseLayout>

<script>
import { StringRecordId } from 'surrealdb';

import { authService } from '$lib/services/auth.ts'
import { waitElement } from '$lib/utils.ts';

customElements.whenDefined('wl-database').then(async () => {
  const wlDatabase: HTMLElement = await waitElement('#user-edit-wldb');

  wlDatabase.addEventListener('wl-task:completed', (event) => {
    const form = document.getElementById('form-update-user')

    form.addEventListener('submit', async (event) => {
      event.preventDefault();

      const userId = new URLSearchParams(window.location.search).get('id')
      const formData = new FormData(form);
      const data = Object.fromEntries(formData);
      const db = authService.getDb();

      // validate form

      // const date = new Date(data.auth_until)
      // console.log(date)
      // return

      if (data.password) {
        await updatePassword(db, userId, data.password)
        form.querySelector('#user-password').value = ''
      }

      if (data.module) {
        let modules = []

        formData.forEach((value, key) => {
          if (key === 'module') {
            modules.push(new StringRecordId(value.toString()))
          }
        })

        await grantsModule(db, userId, modules)
      }

      data.auth_until = new Date(data.auth_until)
      delete data.password

      // actually update the user
      const foo = await db.merge(new StringRecordId(userId), data);
      console.log(foo)

      alert('User updated successfully')
    })
  })
});

async function updatePassword(db: Surreal, userId: string, password: string) {
  await db.query(`UPDATE ${userId} SET password = $password;`, { password })
}

async function grantsModule(db: Surreal, userId: string, data: object[]) {
  const allocator = new StringRecordId(authService.getUser().id)

  await db.query(`
LET $to_remove = (SELECT VALUE id FROM $user->grants->module WHERE id NOT IN $modules);
LET $to_add = (SELECT VALUE id FROM $modules WHERE id NOT IN $user->grants->module);

RELATE $user->grants->$to_add SET allocator = $allocator;
DELETE grants WHERE out IN $to_remove;
    `,
    { user: new StringRecordId(userId), modules: data, allocator }
  )
}
</script>
