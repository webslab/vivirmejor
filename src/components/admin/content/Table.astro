---
import { WlDatabase } from '@webslab/shared/components/database';
import PlaceHolder from './_TableHolder.astro'

interface Props {
	table: string;
}

const { table } = Astro.props;
---

<WlDatabase
  live={true}
  target="tbody"
  query={`SELECT
    time::format(publish, '%d-%m-%Y') as publish_fmt,
    publish < time::now() AND !draft as published,
    author.name as author, * FROM ${table} ORDER BY publish DESC;`}
  client:only="lit">

  <PlaceHolder />

  <template slot="template" is:raw>
    {% for item in result[0] %}
    <tr data-id="{{ item.id }}">
      <td style="white-space: nowrap; text-overflow:ellipsis; overflow: hidden; max-width:10rem;" >{{ item.title }}</td>
      <td class="d-none d-lg-table-cell">{{ item.author }}</td>
      <td class="d-none d-md-table-cell">
        {{ item.publish_fmt }}
        <button
          class="btn btn-sm"
          data-action="draft">
          {{ "✅" if item.published else "❎"}}
        </button>
      </td>
      <td class="d-none d-md-table-cell">{{ item.likes or 0 }}</td>
      <td class="d-none d-lg-table-cell text-center">
        <button data-action="stats" class="btn btn-sm btn-info">stats</button>
        <!-- <button data-action="update" class="btn btn-sm btn-success">update</button> -->
        <a href="/auth/admin/content/edit?id={{ item.id }}" class="btn btn-sm btn-success">update</a>
        <button data-action="delete" class="btn btn-sm btn-danger">delete</button>
      </td>

      <td class="d-lg-none dropdown">
        <button
          class="btn float-end pt-0 border border-primary"
          type="button"
          data-bs-toggle="dropdown"
          aria-label="Options menu"
          aria-expanded="false">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-three-dots-vertical" viewBox="0 0 16 16">
            <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0"/>
          </svg>
        </button>

        <ul class="dropdown-menu">
          <li>
            <button data-action="stats" class="btn btn-sm btn-info dropdown-item">Stats</button>
          </li>

          <li>
            <!-- <button data-action="update" class="btn btn-sm btn-success dropdown-item">Update</button> -->
            <a
              class="btn btn-sm btn-success dropdown-item"
              href="/auth/admin/content/edit?id={{ item.id }}">
              update
            </a>
          </li>

          <li>
            <button data-action="delete" class="btn btn-sm btn-danger dropdown-item">Delete</button>
          </li>
        </ul>
      </td>
    </tr>
    {% endfor %}
  </template>
</WlDatabase>

<script>
  import { authService } from '$lib/services/auth.ts';
  import { waitElement } from '$lib/utils.ts';

  customElements.whenDefined('wl-database').then(async () => {
    const wlDatabase: HTMLElement = await waitElement('wl-database');
    // @ts-ignore
    wlDatabase.auth = authService // yes, it's a setter

    wlDatabase.addEventListener('wl-task:completed', () => {
      const trs: NodeListOf<HTMLTableRowElement> = wlDatabase.querySelectorAll('tbody tr');

      trs.forEach((tr) => {
        const id = tr.getAttribute('data-id');
        addListeners(tr, id);
      });
    });
  });

  function addListeners(tr: HTMLTableRowElement, id: string) {
    const buttons = tr.querySelectorAll('button[data-action]');
    const db = authService.getDb();

    buttons.forEach((btn) => {
      btn.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        const action = target.dataset.action;

        switch (action) {
          case 'stats':
            console.log('stats', id);
            break;

          // case 'update':
          //   console.log('update', id);
          //   break;

          case 'delete':
            console.log('delete', id);

            if (window.confirm('Are you sure you want to delete this post?'))
              db.query(`DELETE type::record($postId);`, {postId: id}).then(() => tr.remove());
            break;

          case 'draft':
            console.log('draft', id);

            db.query(`UPDATE type::record($postId) SET draft = !draft;`, {postId: id})
              .then((res) => {
                // update the target element
                const td = tr.querySelector('td:nth-child(3)') as HTMLTableCellElement;
                const btn = td.querySelector('button') as HTMLButtonElement;

                // TODO: pdt. test
                // btn.textContent = res[0][0].draft && res[0][0].publish < new Date() ? '❎' : '✅';
              });
            break;

          default:
            console.log('unknown action: ', action);
            break;
        }
      });
    });
  }
</script>
